AIチャットアプリケーション開発仕様書

1. 要求定義 (ユーザー要求)
このセクションでは、「なぜこのアプリケーションを作るのか」「ユーザーは何を達成したいのか」という、プロジェクトの根本的な目的を定義します。

1.1. プロジェクトゴール

最新の生成AIモデルを活用し、テキストだけでなく画像やファイルも扱える、高機能で直感的なチャットアプリケーションを開発する。これにより、ユーザーは情報収集、学習、プログラミング、アイデア創出など、多様な知的作業を効率的に行えるようになることを目指す。

1.2. ユーザーストーリー

開発者として、プログラミングに関する質問をし、コードスニペットを含んだ回答をシンタックスハイライト付きで受け取りたい。
研究者として、複雑な数式を含む論文の要約を依頼し、数式が正しくレンダリングされた状態で読みたい。
デザイナーとして、簡単なアイコンや図の作成をAIに指示し、SVG形式のベクター画像として即座に受け取りたい。
一般的なユーザーとして、画像やテキストファイルをAIに見せて、その内容について質問したい。
すべてのユーザーとして、過去のチャット履歴を簡単に保存し、後から読み込んで対話を再開したい。

2. 要件定義 (システム要件)
このセクションでは、要求を実現するために「システムが何をしなければならないか」を、機能面と非機能面から定義します。

2.1. 機能要件

システムが提供すべき具体的な機能。

設定管理
ユーザーは、使用するAIモデル名とAPIキーを設定できる。
設定内容はURLパラメータとして永続化できる。

チャット機能
ユーザーはテキストメッセージを送信できる。
ユーザーは画像ファイル（image/*）を添付して送信できる。
ユーザーはテキストベースのファイル（.txt, .js等）を添付して送信できる。
ユーザーはテキストとファイルを同時に送信できる。

コンテンツ表示機能
メッセージはMarkdownとして解釈され、見出し、リスト、引用などが適切に表示される。
メッセージ内のLaTeX形式の数式（$ ... $, $$ ... $$）は、数式としてレンダリングされる。
メッセージ内のSVGコードブロックは、レンダリングされた画像として表示される。
上記以外のコードブロックは、言語に応じてシンタックスハイライトが適用される。

チャット履歴管理機能
ユーザーは、現在のチャット履歴（全メッセージとタイムスタンプ）をJSONファイルとしてダウンロードできる。
ユーザーは、ダウンロードしたJSONファイルをアップロードし、チャット履歴を完全に復元できる。

2.2. 非機能要件

システムの品質、性能、使いやすさに関する要件。

ユーザーエクスペリエンス (UX)
チャットUIは、ユーザーとAIのメッセージが左右に分かれる吹き出し形式であること。
AIの応答中は、タイピング中であることが視覚的にわかるインジケーターを表示すること。
AIの応答完了時に、控えめな通知音を再生すること。
コードやSVG、メッセージ本文を簡単にコピーできるボタンを提供すること。
コードやSVGをファイルとしてダウンロードできるボタンを提供すること。
メッセージ入力欄は、入力内容に応じて高さが自動で調整されること。
Ctrl+Enter (MacではCmd+Enter) でメッセージを送信できること。
チャット履歴に新しいメッセージが追加された際、自動で最下部までスクロールすること。ただし、ユーザーが手動でスクロール中は、この動作を一時的に抑制すること。

パフォーマンス
AIからの応答は、ユーザーの待ち時間を減らすため、ストリーミングで逐次表示すること。
ファイルの読み込みやAPI通信は非同期で行い、UIのブロッキングを避けること。

セキュリティ
APIキー入力欄は、入力内容が見えないようにパスワード形式 (type="password") にすること。

エラーハンドリング
APIキーが未設定、または無効な場合は、チャット機能を無効化し、設定を促すこと。
API通信でエラーが発生した場合、エラーメッセージをユーザーがコピー可能な形式で画面に表示し、入力内容を保持したまま再送信できるようにすること。

3. 技術仕様
このセクションでは、要件を「どのように実現するか」について、開発者が直接参照できるレベルで具体的に記述します。

3.1. 開発環境・技術スタック

基本構成: すべてのコードを単一のHTMLファイルに記述する。
言語: HTML, CSS, Vanilla JavaScript (ES Modules形式)
外部ライブラリ (ES Modules形式でCDNから読み込む):
@google/generative-ai: Google Gemini APIとの通信用
marked: Markdownレンダリング用
highlight.js: コードブロックのシンタックスハイライト用
MathJax: 数式レンダリング用

3.2. API連携仕様 (Google Gemini API)

初期化:
GoogleGenerativeAI(apiKey)でクライアントを初期化する。
getGenerativeModel()でモデルを取得する際、以下のsystemInstructionを必ず設定する。
「ユーザーから図形やグラフの描画を指示された場合は、必ずSVGコードを生成し、そのコードブロックの言語指定を ```svg として応答してください。他の形式（xmlなど）は使用しないでください。また、数式を記述する際は、必ずLaTeX形式（インラインは$...$、ブロックは$$...$$）を使用してください。」

メッセージ送信:
画像ファイルは、FileReader.readAsDataURL()でBase64にエンコードし、MIMEタイプを分離してinlineData形式のオブジェクト ({ inlineData: { data: "...", mimeType: "..." } }) として送信する。
テキストファイルは、FileReader.readAsText()で内容を読み込み、以下の形式のプロンプトに整形して送信する。
[添付ファイル: {ファイル名}]\n\``\n{ファイルの内容}\n````

3.3. コンテンツレンダリング仕様

複数のライブラリが競合しないよう、以下のパイプラインに従って実装する。

レンダリングパイプライン（処理順序）:
1. Markdown変換: marked.parse()でメッセージ文字列をHTMLに変換する。この際、オプションとして{ gfm: true }を指定し、数式内の_が意図せずタグに変換されるのを防ぐ。
2. HTMLをDOMに追加: 生成されたHTMLをメッセージバブルのコンテナにinnerHTMLで設定する。
3. SVGとコードの処理: コンテナ内の pre > code 要素を探索し、言語指定に応じてSVG描画またはhighlight.jsによるハイライト処理を行う。
4. 数式処理: 最後にコンテナ全体に対して MathJax.typesetPromise() を実行し、数式をレンダリングする。

数式レンダリング (MathJax):
設定: skipHtmlTagsオプションに['pre', 'code']などを指定し、コードブロック内でMathJaxが誤動作しないようにする。
コピー機能:
MathJax.startup.document.getMathItemsWithin() APIを利用して、レンダリングされた各数式のDOM要素と元のLaTeXソースを取得する。
HTML構造の直接解析は、不安定なため禁止とする。
各数式のコンテナ（mjx-container）にマウスホバーした際にコピーボタンを表示する。
ブロック数式の場合、コピーボタンがパディングの内側に配置されるようCSSで位置を調整する（例: top: 8px; right: 8px;）。

SVGレンダリング:
svg言語が指定されたコードブロック（例: .language-svg）を見つけたら、その要素を親の

要素の外に移動させる。
要素のテキストコンテンツ（SVGコード）をパースし、
要素の代わりにDOMに直接挿入する。
生成されたSVGラッパーには、タイトル（"SVG"）と、元のSVGコードをコピーするボタン、SVGファイルとしてダウンロードするボタンを含むヘッダーを設ける。

コードブロックレンダリング (highlight.js):
svg以外の言語が指定されたコードブロックにhighlight.jsを適用する。
各コードブロックには、言語名、コピーボタン、ダウンロードボタンを含むヘッダーを設ける。
CSSでwhite-space: pre-wrap; word-break: break-all;を指定し、長い行の強制折り返しを行う。

3.4. 履歴データ構造 (JSON)

ダウンロード・アップロード機能のため、チャット履歴は以下のJSON形式で管理する。

[
  {
    "role": "user",
    "text": "二次方程式 $ax^2 + bx + c = 0$ の解の公式を教えてください。",
    "timestamp": "2023-10-27T14:30:15.123Z"
  },
  {
    "role": "ai",
    "text": "はい、二次方程式の解の公式は以下の通りです。\n\n$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$$\n",
    "timestamp": "2023-10-27T14:30:20.456Z"
  }
]
