# 高機能チャットUI開発要件

GoogleのGemini APIを利用した、高機能なWebチャットアプリケーションを作成してください。すべてのコード（HTML, CSS, JavaScript）を一つのHTMLファイルにまとめてください。

## 1. プロジェクト概要

シングルページのWebアプリケーションとして動作する、リアルタイムAIチャットインターフェースを構築します。ユーザーはテキストメッセージに加え、画像やテキストファイルを添付してAIと対話できます。AIからの応答は、Markdown、数式(LaTeX)、コードブロック、SVGグラフィックを適切にレンダリングして表示します。

## 2. 技術仕様

- **言語:** HTML, CSS, Vanilla JavaScript (ES Modules形式)
- **外部ライブラリ (CDN経由で読み込むこと):**
    1.  **Google Generative AI for Web SDK:** `@google/generative-ai`
    2.  **marked.js:** MarkdownをHTMLに変換するため
    3.  **highlight.js:** コードブロックのシンタックスハイライトのため
    4.  **MathJax:** LaTeX形式の数式をレンダリングするため

## 3. 画面構成とUIコンポーネント

- **ヘッダー:**
    - アプリケーションのタイトル。
    - 「設定」ボタン（設定エリアの表示/非表示を切り替えるトグル）。
- **設定エリア (デフォルトでは非表示):**
    - **モデル名入力欄:** デフォルト値として `gemini-2.5-pro` を設定。
    - **APIキー入力欄:** `type="password"`に設定。
    - **「適用」ボタン:** `type="submit"`に設定。
    - **対話履歴管理:**
        - 「履歴をダウンロード」ボタン。
        - 「履歴をアップロード」ボタン (`<input type="file">` を利用)。
- **チャット履歴エリア:**
    - ユーザーのメッセージは右側に、AIのメッセージは左側に表示される、吹き出し形式のUI。
    - 各メッセージには送信時刻（例: `14:30`）を表示。
    - AIからの応答を待っている間、タイピング中であることを示すアニメーション（タイピングインジケーター）を表示。
- **メッセージ入力エリア (フッター):**
    - **ファイル添付ボタン:** クリックするとファイル選択ダイアログが開く。
    - **テキスト入力欄 (`<textarea>`):**
        - 入力内容に応じて高さが自動で伸び縮みする。
        - `Ctrl+Enter` (または `Cmd+Enter`) でメッセージを送信できる。
    - **送信ボタン:** メッセージやファイルが入力されている場合にのみクリック可能。
- **ファイルプレビューエリア:**
    - メッセージ送信前に、添付されたファイル名の一覧を表示。
    - 各ファイル名の横に「×」ボタンを付け、添付をキャンセルできるようにする。
- **通知:**
    - コードのコピー時などに「コピーしました！」といったメッセージを画面下部に短時間表示するトースト通知機能。

## 4. 詳細な機能要件

### 4.1. 初期化と設定
- APIキーとモデル名はURLのパラメータから取得する。
- APIキーがURLに設定されていない場合は、設定エリアを強制的に表示し、チャット機能を使えないようにする。
- APIキーやモデル名が変更されたら、チャットセッションを再初期化する。
- **システムプロンプト:** Geminiモデルの初期化時に、以下の`systemInstruction`を設定してください。
    - `「ユーザーから図形やグラフの描画を指示された場合は、必ずSVGコードを生成し、そのコードブロックの言語指定を \`\`\`svg として応答してください。他の形式（xmlなど）は使用しないでください。また、数式を記述する際は、必ずLaTeX形式（インラインは`$...$`、ブロックは`$$...$$`）を使用してください。」`

### 4.2. メッセージ送信とファイル処理
- **テキストとファイルの同時送信:** ユーザーはテキストとファイルを同時に送信できる。
- **ファイルの種類に応じた処理:**
    - **画像ファイル (例: `image/png`, `image/jpeg`):** Base64エンコードして、Gemini APIの`inlineData`形式で送信する。
    - **テキストベースのファイル (例: `.txt`, `.js`, `.py`, `.html`, `.css`, etc.):** ファイルの内容をテキストとして読み込み、プロンプトの一部として送信する。その際、どのファイルの内容か明確にするため、`「[添付ファイル: sample.js]\n\`\`\`\n// ファイルの内容...\n\`\`\`」` という形式でラップしてから送信する。
- **ドラッグ＆ドロップ:** メッセージ入力エリアにファイルをドラッグ＆ドロップして添付できる機能。
- **APIエラー発生時の入力保持:** APIのエラーが発生したとき、ユーザが同じ内容を再送信する場合、ユーザの手間を省く。

### 4.3. 応答の表示処理
- AIからの応答テキストを`marked.js`でHTMLに変換して表示。
- **数式のレンダリング:**
    - インライン数式 (`$...$`)とブロック数式 (`$$...$$`)を`MathJax`で正しくレンダリングする。
- **コードブロックの特別処理:**
    - `highlight.js`を使用してシンタックスハイライトを適用。
    - 各コードブロックには、言語名、コピーボタン、ダウンロードボタンを含むヘッダーを設ける。
    - 長いコード行がコンテナをはみ出さないよう、強制的に折り返して表示する (`white-space: pre-wrap; word-break: break-all;`)。
- **SVGの直接描画 (最重要要件):**
    - AIからの応答に、言語指定が `svg` のコードブロック (`\`\`\`svg ... \`\`\``) が含まれていた場合、その中身のSVGコードを**テキストとしてではなく、レンダリングされたSVG画像として直接表示**してください。

### 4.4. 対話履歴の管理
- **ダウンロード:** 現在の対話履歴（ユーザーとAIのやり取り、および各メッセージのタイムスタンプ）をJSONファイルとして保存する。
- **アップロード:** ダウンロードしたJSONファイルを読み込み、チャットの状態を完全に復元する。

### 4.5. UXの向上
- **通知音:** AIからの応答が完了した際に、控えめな通知音を再生する (`Web Audio API`を使用)。
- **非同期処理の管理:** APIとの通信やファイルの読み込みはすべて非同期で行い、処理中はUIを適切に無効化・有効化してユーザーに状態を明確に伝える。

