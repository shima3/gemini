# AIチャット開発要件

GoogleのGemini APIを利用した、Webチャットアプリケーションを作成してください。
すべてのコード（HTML, CSS, JavaScript）を一つのHTMLファイルにまとめてください。

## 1. プロジェクト概要

シングルページのWebアプリケーションとして動作する、リアルタイムAIチャットインターフェースを構築します。ユーザーはテキストメッセージに加え、画像やテキストファイルを添付してAIとチャットできます。チャット履歴には、ユーザやAIのメッセージをMarkdown、数式(LaTeX)、コードブロック、SVGグラフィックを適切にレンダリングして表示します。

## 2. 技術仕様

- **言語:** HTML, CSS, Vanilla JavaScript (ES Modules形式)
- **外部ライブラリ (ES Modules形式で読み込むこと):**
    1.  **Google Generative AI for Web SDK:** `@google/generative-ai`
    2.  **marked.js:** MarkdownをHTMLに変換するため
    3.  **highlight.js:** コードブロックのシンタックスハイライトのため
    4.  **MathJax:** LaTeX形式の数式をレンダリングするため

## 3. 画面構成とUIコンポーネント

- **ヘッダー:**
    - アプリケーションのタイトル。
    - 「設定」ボタン（設定エリアの表示/非表示を切り替えるトグル）。
- **設定エリア (デフォルトでは非表示):**
    - **モデル名入力欄:** デフォルト値として `gemini-2.5-pro` を設定。
    - **APIキー入力欄:** `type="password"`に設定。
    - **「適用」ボタン:** `type="submit"`に設定。submitすると、URLのパラメータとして、モデル名とAPIキーが設定され、それらをJavaScriptで読み取る。
    - **チャット履歴管理:**
        - 「履歴をダウンロード」ボタン。
        - 「履歴をアップロード」ボタン (`<input type="file">` を利用)。
- **チャット履歴エリア:**
    - ユーザーのメッセージは右側に、AIのメッセージは左側に表示される、吹き出し形式のUI。
    - 各メッセージの外側横に送信時刻（例: `14:30`）を表示する。表示は時と分だけだが、内部では年月日も記録している。
    - AIからの応答を待っている間、タイピング中であることを示すアニメーション（タイピングインジケーター）を表示。
- **メッセージ入力エリア (フッター):**
    - **ファイル添付ボタン:** クリックするとファイル選択ダイアログが開く。
    - **テキスト入力欄 (`<textarea>`):**
        - 入力内容に応じて高さが自動で伸び縮みする。
        - `Ctrl+Enter` (または `Cmd+Enter`) でメッセージを送信できる。
    - **送信ボタン:** メッセージやファイルが入力されている場合にのみクリック可能。
- **ファイルプレビューエリア:**
    - メッセージ送信前に、添付されたファイル名の一覧を表示。
    - 各ファイル名の横に「×」ボタンを付け、添付をキャンセルできるようにする。
- **通知:**
    - コードのコピー時などに「コピーしました！」といったメッセージを画面下部に短時間表示するトースト通知機能。

## 4. 詳細な機能要件

### 4.1. 初期化と設定
- APIキーとモデル名はURLのパラメータから取得する。
- APIキーがURLに設定されていない場合や無効な場合は、設定エリアを強制的に表示する。この状態では、メッセージの送受信に関連する全てのUIコンポーネント（テキスト入力欄、送信ボタン、ファイル添付ボタン）および、履歴管理機能（ダウンロード、アップロード）も操作不可能な状態にしなければならない。
- APIキーやモデル名が変更されたら、チャットセッションを再初期化する。
- **システムプロンプト:** Geminiモデルの初期化時に、以下の`systemInstruction`を設定してください。
    - `「ユーザーから図形やグラフの描画を指示された場合は、必ずSVGコードを生成し、そのコードブロックの言語指定を \`\`\`svg として応答してください。他の形式（xmlなど）は使用しないでください。また、数式を記述する際は、必ずLaTeX形式（インラインは`$...$`、ブロックは`$$...$$`）を使用してください。」`
- 「適用」ボタン: type="submit"に設定し、クリックすると設定内容を適用する。設定エリアのその他のボタンはフォームの送信（submit）を引き起こしてはならない。

### 4.2. メッセージ送信とファイル処理
- **テキストとファイルの同時送信:** ユーザーはテキストとファイルを同時に送信できる。
- **ファイルの種類に応じた処理:**
    - **画像ファイル (例: `image/png`, `image/jpeg`):** Base64エンコードして、Gemini APIの`inlineData`形式で送信する。
    - **テキストベースのファイル (例: `.txt`, `.js`, `.py`, `.html`, `.css`, etc.):** ファイルの内容をテキストとして読み込み、プロンプトの一部として送信する。その際、どのファイルの内容か明確にするため、`「[添付ファイル: sample.js]\n\`\`\`\n// ファイルの内容...\n\`\`\`」` という形式でラップしてから送信する。
- **ドラッグ＆ドロップ:** メッセージ入力エリアにファイルをドラッグ＆ドロップして添付できる機能。
- **エラー発生時の処理:**
    - APIのエラーが発生したとき、ユーザが同じ内容を再送信する場合のため、メッセージや添付ファイルを保持する。
    - エラーメッセージはユーザが報告するため、トースト通知ではなく、コピーできるように画面に表示する。

### 4.3. チャット履歴の表示処理
- ユーザまたはAIのメッセージを`marked.js`でHTMLに変換して表示する。
- メッセージの外側横にコピーのボタンと送信時刻を縦に並べて表示する。コピーボタンを押すとHTML変換前の元テキストをコピーできる。
- **数式のレンダリング:**
    - メッセージにインライン数式 (`$...$`)やブロック数式 (`$$...$$`) が含まれる場合、それぞれエラーなく数式としてレンダリングされること。
    - 各数式にポインタを合わせると、元のLaTeXコードをコピーするためのボタンが数式の表示範囲内に表示され、機能すること。
- **SVGの直接描画:**
    - メッセージに `svg` のコードブロックが含まれる場合、コードではなく**レンダリングされた画像**としてエラーなく表示されること。
    - 表示されたSVGの上部には「SVG」というタイトルが表示されるヘッダーが付いていること。
    - ヘッダーには機能する「コピー」ボタン（SVGの元コードをコピー）が存在すること。
- **コードブロック（数式とSVG以外）の特別処理:**
    - メッセージに、数式やSVG以外のコードが含まれる場合、`highlight.js`を使用してシンタックスハイライトを適用し、エラーなく表示されること。
    - 各コードブロックには、言語名、コピーボタン、ダウンロードボタンを含むヘッダーを設ける。
    - 長いコード行がコンテナをはみ出さないよう、強制的に折り返して表示する (`white-space: pre-wrap; word-break: break-all;`)。
- **複合コンテンツ:**
    - 1つのメッセージに、通常のテキスト、コードブロック、数式、SVGが混在していても、すべての要素が正しくエラーなく表示されること。
- **AI応答のストリーミング表示:**
    - 完了するまでプレーンテキストとし、完了後に一括でリッチコンテンツに変換する。
- **ダウンロードファイルの名前:** メッセージに含まれるSVGやコードをダウンロードする時、ファイル名に現在時刻ではなく、元のメッセージの送信時刻（時2桁と分2桁）を付ける。内容に応じて標準的な拡張子を付ける。

### 4.4. チャット履歴の管理
- **ダウンロード:** 現在のチャット履歴（ユーザーとAIのやり取り、および各メッセージの送信時刻）をJSONファイルとして保存する。
- **アップロード:** ダウンロードしたJSONファイルを読み込み、チャットの状態を完全に復元する。これには、各メッセージの内容だけでなく、元の送信時刻も含まれる。復元されたチャット履歴のUIには、保存されていた元の時刻が正確に表示されなければならない。

### 4.5. UXの向上
- **通知音:** AIからの応答が完了した際に、控えめな通知音を再生する (`Web Audio API`を使用)。
- **非同期処理の管理:** APIとの通信やファイルの読み込みはすべて非同期で行い、処理中はUIを適切に無効化・有効化してユーザーに状態を明確に伝える。
- **自動スクロール:** チャット履歴にメッセージを追加した時、最終メッセージの先頭が表示されるようにスクロールする。ただし、ユーザが手動でスクロールしたときは自動スクロールをオフとし、メッセージを送信したときに自動スクロールをオンとする。
